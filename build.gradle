/*
   JaCaMo Gradle build file

*/

plugins {
  id "ca.coglinc.javacc" version "2.4.0"
  // see https://github.com/johnmartel/javaccPlugin
}

defaultTasks 'jar'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version '0.8-SNAPSHOT'
group   'org.jacamo'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()

    maven { url "http://jacamo.sourceforge.net/maven2/" }
    maven { url "http://jade.tilab.com/maven/" }
    
    //flatDir {       dirs 'lib'    }
}


dependencies {
    compile group: 'org.jason-lang' , name: 'jason'   , version: '2.4-SNAPSHOT' , changing: true, transitive: false
    compile group: 'org.jacamo'     , name: 'cartago' , version: '2.4-SNAPSHOT' , changing: true, transitive: false
    compile group: 'org.jacamo'     , name: 'jaca'    , version: '2.4-SNAPSHOT' , changing: true, transitive: false
    
    compile group: 'org.jacamo'     , name: 'moise'   , version: '0.12-SNAPSHOT', changing: true, transitive: false

    compile group: 'guru.nidi'      , name: 'graphviz-java', version: '0.7.0'

    runtime group: 'org.jacamo'     , name: 'npl'     , version: '0.4-SNAPSHOT' , changing: true, transitive: false
    runtime group: 'org.jacamo'     , name: 'intmas'  , version: '1.0.0'

    runtime group: 'org.jacamo'     , name: 'sai'     , version: '0.3-SNAPSHOT', changing: true , transitive: false
    runtime "org.antlr:antlr4:4.7"

    runtime group: 'com.tilab.jade' , name: 'jade'    , version: '4.5.0'
    runtime group: 'org.apache.ant' , name: 'ant'     , version: '1.10.+'

    testCompile 'junit:junit:4.12'
}

// copy dep jars and scritps into build directory
task copyJarsToBuild {
    inputs.files configurations.runtime.files
    inputs.dir   'scripts'
    outputs.dir  'build/libs'
    outputs.dir  'build/scripts'
    doLast {
        copy {
            from configurations.runtime
            into 'build/libs'
            //exclude '**/jason-2.0.jar'
        }
        copy {
            from 'scripts'
            into 'build/scripts'
            include '**'
            filter {
			    String line -> line.replaceAll("JacamoREL=[0-9]+\\.[0-9]+", "JacamoREL="+project.version)
			}
			filter {
				String line -> line.replaceAll("JasonREL", file(project.configurations.compile.find { it.name.startsWith("jason-") }).name)
			}
        }
    }
}

jar {
    baseName 'jacamo'
    manifest {
        attributes 'Main-Class': 'jacamo.util.ConfigGUI',
                   'Specification-Title': 'JaCaMo framework',
                   'Specification-Version': project.version,
                   'Implementation-Version': new Date().toString(),
                   'Class-Path': file(project.configurations.compile.find { it.name.startsWith("jason-") }).name
    }

    //from ( configurations.compile.collect { zipTree(it) } ) {
    //    include 'jason/**/*Factory.class', 'jason/**/Config.class'
    //}

    /*doFirst {
        Properties props = new Properties()
        props.put('version', '')
        props.put('release', project.version)
        props.store(new File(project.buildDir.absolutePath +'/classes/main/jacamo.dist.properties').newWriter(), null)
    }*/
}
jar.dependsOn(copyJarsToBuild)

clean {
    delete 'bin'
    delete 'readme.html'
    delete 'release-notes.html'
    delete fileTree('doc') { include '*.html'  }
    delete fileTree('doc/tutorials/hello-world')  { include '**/*.html'  }
    delete fileTree('doc/tutorials/coordination') { include '*.html'  }
    delete fileTree('doc/tutorials/gold-miners')  { include '**/*.html'  }
    delete fileTree('src')  { include '**/bin'  }
    delete fileTree('src')  { include '**/*.log'  }
    delete 'examples/auction/bin'
    delete 'examples/house-building/bin'
    delete 'examples/writing-paper/bin'
}

task config (dependsOn: 'jar') {
    /*main = 'jacamo.util.Config'
    classpath sourceSets.main.runtimeClasspath
    workingDir project.buildDir.absolutePath + '/libs'

    doFirst {
        delete System.getProperty("user.home")+'/.jacamo'
    }*/

    doLast {
        println '------'
        println ''
        println 'you can set the JaCaMo home directory with the following command:'
        println '     export JACAMO_HOME='+project.buildDir.absolutePath
        println ''
        println 'and also change your PATH with:'
        println '     export PATH=$JACAMO_HOME/scripts:$PATH'
        println ''
        println '-----'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
			artifact sourceJar
			artifact javadocJar

            artifactId 'jacamo'
        }
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    baseName 'jacamo'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourceJar (type : Jar) {
    baseName 'jacamo'
    classifier = 'sources'
    from sourceSets.main.allSource
}

eclipse {
    classpath {
        downloadJavadoc = true
        file.whenMerged { cp ->
            cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder('build/generated/javacc', null) )
        }

        file.whenMerged { cp ->
	        logger.lifecycle "Removing duplicate classpath entries from eclipse for project '${project.name}'"

	        Map entryByPath = cp.entries.groupBy { entry -> entry.path }
	        entryByPath.each { key, values ->
	          if (values.size() > 1) {
	            def entry = values.first()
	            if (entry.kind == 'src') {
	              entry.includes = []
	              entry.excludes = []
	            }
	            int index = cp.entries.indexOf entry
	            logger.lifecycle "Removing ${values.collect { it.path }}"
	            cp.entries.removeAll values
	            logger.lifecycle "Adding ${entry.path}"
	            cp.entries.add index, entry
	          }
	        }
	   }
    }
}

compileJavacc {
    inputDirectory = file('src/main/javacc')
    outputDirectory = file(project.buildDir.absolutePath + '/generated/javacc/jacamo/project/parser')
}


jjdoc {
    outputDirectory = file(project.projectDir.absolutePath + '/doc')
    //arguments = [text: 'true']
}

// transfer local maven artifact to our maven2 repository at sourceforge
task publishMavenSF(dependsOn: [ 'build', 'publishToMavenLocal']) {
	doLast {
	    def wdir = System.getProperty("user.home")+'/.m2/repository/org/jacamo/jacamo'
	    def tdir = 'jomifred,jacamo@web.sf.net:/home/project-web/jacamo/htdocs/maven2/org/jacamo/jacamo'
	    exec {
	        commandLine 'scp', '-r', project.version, tdir
	        workingDir wdir
	    }
	    exec {
	        commandLine 'cp', 'maven-metadata-local.xml', 'maven-metadata.xml'
	        workingDir wdir
	    }
	    exec {
	        commandLine 'scp', 'maven-metadata.xml', tdir
	        workingDir wdir
	    }
	}
}

javadoc {
    options.showAll()
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle('JaCaMo API')
    options.docTitle('JaCaMo API')
    options.footer('<a href=http://jacamo.sf.net>JaCaMo Site</a>')
    destinationDir = file("${buildDir}/../doc/api")
    doFirst {
        javadoc.title = 'JaCaMo API'
        javadoc.options.docTitle = javadoc.title
    }
}


// Builds the distribution, documentation and a new release
task doc(dependsOn: [ 'jjdoc', 'javadoc', 'renderAsciiDocs']) {
}

task renderAsciiDocs(type: Exec) {
        commandLine 'find', '.', '-name', '*.adoc', '-exec', 'asciidoctor', '-r', project.buildDir.absolutePath+'/../src/main/resources/pygments_init.rb', '{}', ';'
}

task fixTab {
    ant.fixcrlf(eol: 'lf',  includes: '**/*.txt,**/*.bat, **/*.adoc', srcdir: '.')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml', srcdir: 'src')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.jcm', srcdir: 'examples')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.jcm', srcdir: 'demos')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.jcm,**/*.txt', srcdir: 'doc')
}


// Builds the distribution, documentation and a new release
task release(dependsOn: [ 'build', 'doc', 'fixTab', 'zipRel']) {
}

// copy files used to build a release
task copyRel {
	doLast {
	    copy {
	        from '.'
	        into 'build/jacamo-'+project.version
	        include '*.html'
	        include 'LICENSE'
	        include 'doc/**'
	    }
	    copy {
	        from 'build/scripts'
	        into 'build/jacamo-'+project.version+'/scripts'
	    }
	    copy {
	        from libsDir
	        from configurations.runtime
	        into 'build/jacamo-'+project.version+'/'+libsDirName
	        include '**/*.jar'
	        //exclude '**/jason-2.0.jar'
	    }
	    copy {
	        from docsDir
	        into 'build/jacamo-'+project.version+'/doc'
	    }
	    copy {
	        from 'examples'
	        into 'build/jacamo-'+project.version+'/examples'
	    }
	    copy {
	        from 'demos'
	        into 'build/jacamo-'+project.version+'/demos'
	    }
	    copy {
	        from 'src/main/resources/templates'
	        into 'build/jacamo-'+project.version+'/src/templates'
	    }
	    delete fileTree('build/jacamo-'+project.version+'/doc')  { include '**/*.adoc', '**/Makefile', '**/publish.sh'  }
	}
}

// creates a zip file for a release
task zipRel(type: Zip, dependsOn: copyRel) {
    from 'build/jacamo-'+project.version
    baseName 'jacamo'
}
